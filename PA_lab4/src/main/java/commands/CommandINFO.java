package commands;

import Exception.MyException;
import org.apache.tika.exception.TikaException;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.AutoDetectParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.sax.BodyContentHandler;
import org.xml.sax.SAXException;
import utils.PathManager;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

/**
 * Class used for the the info functionality, i.e displaying the metadata of a certain song
 */
public class CommandINFO implements Command {
    private PathManager pathManager;
    public CommandINFO(PathManager pathManager) {
        this.pathManager = pathManager;
    }

    /**
     * Method for the metadata generation
     * @param file we need data on
     * @return metadata
     */
    protected static Metadata getMetaData(File file) throws MyException {
        //Parser method parameters
        AutoDetectParser parser = new AutoDetectParser();
        BodyContentHandler handler = new BodyContentHandler();
        Metadata metadata = new Metadata();
        ParseContext context = new ParseContext();

        FileInputStream inputStream = null;
        try {
            inputStream = new FileInputStream(file);
            parser.parse(inputStream, handler, metadata, context);
            return metadata;
        } catch (IOException | TikaException | SAXException e) {
            throw new MyException("Metadata can't be retrieved", e);
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Method used to print the metadata generated by the getMetaData() method
     * @param metadata generated
     */
    protected static String getStringMetadata(Metadata metadata) {
        String solution = "";
        String[] metadataNames = metadata.names();
        if (metadata != null) {
            boolean artist = false, title = false, year = false, album = false;
            for (String name : metadataNames) {
                if (!artist && name.toUpperCase().contains("ARTIST")) {
                    solution = solution + "ARTIST: " + metadata.get(name) + "\n";
                    artist = true;
                }
                if (!title && name.toUpperCase().contains("TITLE")) {
                    solution = solution + "TITLE: " + metadata.get(name) + "\n";
                    title = true;
                }
                if (!year && name.toUpperCase().contains("YEAR")) {
                    solution = solution + "YEAR: " + metadata.get(name) + "\n";
                    year = true;
                }
                if (!album && name.toUpperCase().contains("ALBUM")) {
                    solution = solution + "ALBUM: " + metadata.get(name) + "\n";
                    album = true;
                }
                //System.out.println(name + "  " + metadata.get(name));
            }
            return solution;
        }
        return null;
    }

    private static String getPropertyValue(Metadata metadata, String property) {
        String[] metadataNames = metadata.names();
        for (String name : metadataNames) {
            if (name.toUpperCase().contains(property.toUpperCase())) {
                return metadata.get(name);
            }
        }
        return null;
    }

    public static String getArtist(File file) throws MyException {
        Metadata metadata = CommandINFO.getMetaData(file);
        return CommandINFO.getPropertyValue(metadata, "artist");
    }

    public static String getTitle(File file) throws MyException {
        Metadata metadata = CommandINFO.getMetaData(file);
        return CommandINFO.getPropertyValue(metadata, "title");
    }

    public static String getYear(File file) throws MyException {
        Metadata metadata = CommandINFO.getMetaData(file);
        return CommandINFO.getPropertyValue(metadata, "year");
    }

    public static String getAlbum(File file) throws MyException {
        Metadata metadata = CommandINFO.getMetaData(file);
        return CommandINFO.getPropertyValue(metadata, "album");
    }

    public void setPathManager(PathManager pathManager) {
        this.pathManager = pathManager;
    }

    /**
     * Method that provides the info functionaliy on a user given file using the getMetaData and print methods
     * @param commandArguments user input
     * @throws MyException
     */

    public boolean execute(String[] commandArguments) throws MyException {
        File file = pathManager.getFilePath(commandArguments[1]);

        if (file != null && pathManager.isAudio(file)) {
            System.out.println(file.toString());
            Metadata metadata = getMetaData(file);
            if (metadata != null) {
                System.out.println(CommandINFO.getStringMetadata(metadata));
            }
        }
        else {
            throw new MyException("Path is not valid or file is not audio,please try again \n");
        }
        return true;
    }
}
